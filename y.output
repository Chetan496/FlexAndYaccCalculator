Grammar

    0 $accept: list $end

    1 list: stmt
    2     | list stmt

    3 stmt: expr ','
    4     | expr ':'

    5 expr: INT
    6     | VAR
    7     | VAR '=' expr
    8     | expr '+' expr
    9     | expr '*' expr
   10     | '+' expr
   11     | '(' expr ')'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 11
')' (41) 11
'*' (42) 9
'+' (43) 8 10
',' (44) 3
':' (58) 4
'=' (61) 7
error (256)
INT (258) 5
VAR (259) 6 7


Nonterminals, with rules where they appear

$accept (12)
    on left: 0
list (13)
    on left: 1 2, on right: 0 2
stmt (14)
    on left: 3 4, on right: 1 2
expr (15)
    on left: 5 6 7 8 9 10 11, on right: 3 4 7 8 9 10 11


State 0

    0 $accept: . list $end

    INT  shift, and go to state 1
    VAR  shift, and go to state 2
    '+'  shift, and go to state 3
    '('  shift, and go to state 4

    list  go to state 5
    stmt  go to state 6
    expr  go to state 7


State 1

    5 expr: INT .

    $default  reduce using rule 5 (expr)


State 2

    6 expr: VAR .
    7     | VAR . '=' expr

    '='  shift, and go to state 8

    $default  reduce using rule 6 (expr)


State 3

   10 expr: '+' . expr

    INT  shift, and go to state 1
    VAR  shift, and go to state 2
    '+'  shift, and go to state 3
    '('  shift, and go to state 4

    expr  go to state 9


State 4

   11 expr: '(' . expr ')'

    INT  shift, and go to state 1
    VAR  shift, and go to state 2
    '+'  shift, and go to state 3
    '('  shift, and go to state 4

    expr  go to state 10


State 5

    0 $accept: list . $end
    2 list: list . stmt

    $end  shift, and go to state 11
    INT   shift, and go to state 1
    VAR   shift, and go to state 2
    '+'   shift, and go to state 3
    '('   shift, and go to state 4

    stmt  go to state 12
    expr  go to state 7


State 6

    1 list: stmt .

    $default  reduce using rule 1 (list)


State 7

    3 stmt: expr . ','
    4     | expr . ':'
    8 expr: expr . '+' expr
    9     | expr . '*' expr

    '+'  shift, and go to state 13
    '*'  shift, and go to state 14
    ','  shift, and go to state 15
    ':'  shift, and go to state 16


State 8

    7 expr: VAR '=' . expr

    INT  shift, and go to state 1
    VAR  shift, and go to state 2
    '+'  shift, and go to state 3
    '('  shift, and go to state 4

    expr  go to state 17


State 9

    8 expr: expr . '+' expr
    9     | expr . '*' expr
   10     | '+' expr .

    '*'  shift, and go to state 14

    $default  reduce using rule 10 (expr)


State 10

    8 expr: expr . '+' expr
    9     | expr . '*' expr
   11     | '(' expr . ')'

    '+'  shift, and go to state 13
    '*'  shift, and go to state 14
    ')'  shift, and go to state 18


State 11

    0 $accept: list $end .

    $default  accept


State 12

    2 list: list stmt .

    $default  reduce using rule 2 (list)


State 13

    8 expr: expr '+' . expr

    INT  shift, and go to state 1
    VAR  shift, and go to state 2
    '+'  shift, and go to state 3
    '('  shift, and go to state 4

    expr  go to state 19


State 14

    9 expr: expr '*' . expr

    INT  shift, and go to state 1
    VAR  shift, and go to state 2
    '+'  shift, and go to state 3
    '('  shift, and go to state 4

    expr  go to state 20


State 15

    3 stmt: expr ',' .

    $default  reduce using rule 3 (stmt)


State 16

    4 stmt: expr ':' .

    $default  reduce using rule 4 (stmt)


State 17

    7 expr: VAR '=' expr .
    8     | expr . '+' expr
    9     | expr . '*' expr

    '+'  shift, and go to state 13
    '*'  shift, and go to state 14

    $default  reduce using rule 7 (expr)


State 18

   11 expr: '(' expr ')' .

    $default  reduce using rule 11 (expr)


State 19

    8 expr: expr . '+' expr
    8     | expr '+' expr .
    9     | expr . '*' expr

    '*'  shift, and go to state 14

    $default  reduce using rule 8 (expr)


State 20

    8 expr: expr . '+' expr
    9     | expr . '*' expr
    9     | expr '*' expr .

    $default  reduce using rule 9 (expr)
